const { Events, EmbedBuilder, ChannelType, PermissionFlagsBits } = require('discord.js');

module.exports = {
    name: Events.GuildCreate,
    once: false,
    async execute(guild) {
        console.log(`P.PROTECT a rejoint un nouveau serveur : ${guild.name} (ID: ${guild.id})`);

        // --- PARTIE 1 : MESSAGE DE BIENVENUE ---

        // On cherche un salon o√π envoyer le message de bienvenue
        let welcomeChannel = guild.systemChannel; // Le salon par d√©faut de Discord

        // Si le salon par d√©faut n'existe pas ou que le bot ne peut pas y √©crire, on cherche un autre salon
        if (!welcomeChannel || !welcomeChannel.permissionsFor(guild.client.user).has(PermissionFlagsBits.SendMessages)) {
            welcomeChannel = guild.channels.cache.find(
                channel => channel.type === ChannelType.GuildText &&
                           channel.permissionsFor(guild.client.user).has(PermissionFlagsBits.SendMessages)
            );
        }

        // Si on a trouv√© un salon, on envoie le message
        if (welcomeChannel) {
            const welcomeEmbed = new EmbedBuilder()
                .setColor('#2ECC71')
                .setTitle('üëã Merci d\'avoir ajout√© P.PROTECT !')
                .setDescription('Je suis pr√™t √† s√©curiser votre serveur. Pour une protection optimale, veuillez suivre ces quelques √©tapes de configuration rapide.')
                .setThumbnail(guild.client.user.displayAvatarURL())
                .addFields(
                    {
                        name: '1Ô∏è‚É£ √âtape 1 : Le Salon des Logs (Essentiel)',
                        value: 'C\'est ici que toutes les alertes et actions de mod√©ration seront enregistr√©es. Il est crucial de le configurer.\n‚ñ∂Ô∏è Utilisez la commande `/setlogs #votre-salon-logs`'
                    },
                    {
                        name: '2Ô∏è‚É£ √âtape 2 : Le R√¥le Mod√©rateur',
                        value: 'D√©signez un r√¥le qui aura acc√®s aux commandes de protection. Les administrateurs y auront toujours acc√®s.\n‚ñ∂Ô∏è Utilisez `/set-moderator-role @VotreR√¥leModo`'
                    },
                    {
                        name: '3Ô∏è‚É£ √âtape 3 : Activez les Boucliers',
                        value: 'Une fois les bases pr√™tes, explorez les commandes `/protection` et `/auto-moderation` pour activer les modules de s√©curit√© selon vos besoins.'
                    },
                    {
                        name: '‚ùì Besoin d\'aide ?',
                        value: 'La commande `/help` est disponible √† tout moment pour lister toutes mes fonctionnalit√©s.'
                    }
                )
                .setFooter({ text: 'P.PROTECT - Votre s√©curit√© est notre priorit√©.' });

            try {
                await welcomeChannel.send({ embeds: [welcomeEmbed] });
            } catch (error) {
                console.error(`Impossible d'envoyer le message de bienvenue sur le serveur ${guild.name}.`);
            }
        } else {
            console.warn(`Aucun salon trouv√© pour envoyer le message de bienvenue sur ${guild.name}.`);
        }

        // --- PARTIE 2 : SYNCHRONISATION DES PERMISSIONS (Int√©gr√©e ici) ---

        try {
            console.log(`D√©but de la synchronisation des permissions pour ${guild.name}...`);
            const localCommands = guild.client.commands;
            const remoteCommands = await guild.commands.fetch();

            for (const localCommand of localCommands.values()) {
                const remoteCommand = remoteCommands.find(cmd => cmd.name === localCommand.data.name);
                if (remoteCommand) {
                    const defaultPermissions = localCommand.data.default_member_permissions;
                    if (remoteCommand.defaultMemberPermissions?.equals(defaultPermissions) === false) {
                        console.log(`Mise √† jour des permissions pour la commande /${remoteCommand.name} sur ${guild.name}.`);
                        await remoteCommand.setDefaultMemberPermissions(defaultPermissions || null);
                    }
                }
            }
            console.log(`Synchronisation des permissions termin√©e pour ${guild.name}.`);
        } catch (error) {
            console.error(`Impossible de synchroniser les permissions pour le serveur ${guild.name}:`, error);
        }
    },
};