// src/commands/protection/protection.js (FICHIER COMPLET FINAL)

const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = {
    data: new SlashCommandBuilder()
        .setName('protection')
        .setDescription('Affiche le panel de configuration des protections avanc√©es.'),

    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });

        const guildConfig = await prisma.guild.upsert({
            where: { guildId: interaction.guild.id },
            update: {},
            create: { guildId: interaction.guild.id },
        });

        const embed = new EmbedBuilder()
            .setColor('#E74C3C')
            .setTitle('üõ°Ô∏è Citadelle P.PROTECT - Panel de Protection')
            .setDescription('Configurez ici les boucliers de d√©fense actifs de votre serveur.')
            .addFields(
                { name: 'Syst√®me Captcha', value: guildConfig.captchaEnabled ? 'Activ√© ‚úÖ' : 'D√©sactiv√© ‚ùå', inline: true },
                { name: 'Syst√®me Anti-Raid', value: guildConfig.antiRaidEnabled ? 'Activ√© ‚úÖ' : 'D√©sactiv√© ‚ùå', inline: true },
                { name: 'Syst√®me Anti-Nuke', value: guildConfig.antiNukeEnabled ? `Activ√© ${guildConfig.antiNukeSimulationMode ? ' (Mode Simulation)' : ''} ‚úÖ` : 'D√©sactiv√© ‚ùå', inline: true },
            )
            .setFooter({ text: 'P.PROTECT by Puffins' });

        const configButtons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId('config_captcha_button').setLabel('Configurer le Captcha').setStyle(ButtonStyle.Secondary).setEmoji('üîê'),
                new ButtonBuilder().setCustomId('config_antiraid_button').setLabel('Configurer l\'Anti-Raid').setStyle(ButtonStyle.Secondary).setEmoji('üî•'),
                new ButtonBuilder().setCustomId('config_antinuke_button').setLabel('Configurer l\'Anti-Nuke').setStyle(ButtonStyle.Secondary).setEmoji('üí•')
            );
        
        const analysisButton = new ActionRowBuilder()
            .addComponents(
                 new ButtonBuilder()
                    .setCustomId('security_analysis_button')
                    .setLabel("Analyser la S√©curit√© du Serveur")
                    .setStyle(ButtonStyle.Success)
                    .setEmoji('ü©∫')
            );

        await interaction.editReply({ embeds: [embed], components: [configButtons, analysisButton] });
    },
};